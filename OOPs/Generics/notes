Generics 
=> allow you to code that is independent of a specific data type while ensuring type safety at compile time.

#Key Benefits:
- Type Safety
- Eleimation of cast
- Code Resuablity
- Improved Readability


Generics use type parameter (< >), to specify the type(s) of a class, interface or method.

#Syntax: 
        public class GenericsClass<T> {
            private T Data;
            public GenericClass(T data) {
                this.data = data;
            }
            public T getdata() {
                return data;
            }
        }

    T => Type parameter and can be replaced by any type- "Integer, String" ..etc


    *Type Parameter
    a) T - type
    b) E - Element
    c) K - Key
    d) V - Value
    E) N - Number



   #Bounded Type Parameters

   => Bounded type parameter restrics the types that can be used with a generic class or method. you can use with the "extends" keyword to specify that the type must be a sub class of a specific class or implements specific interfaces.

   Ex: 
            public class BoundedClass <T extends Number> {
                private T number:
                public BoundedClass(T Number) {
                    this.number = number;
                }
                public class square() {
                    returns number.doublevalue() * number.doublevalue();
                }
            }

            public static void main(String[] args) {
                BoundedClass<Integer> intObj = new BoundedClass<>(5);
                System.out.println("Square" + intObj.square());
            }